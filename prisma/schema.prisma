// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

model User {
  id            String      @id
  firstName     String      @default("")
  lastName      String      @default("")
  name          String
  email         String      @unique
  emailVerified Boolean
  image         String?
  locale        String?     @default("fr")
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  feedbacks     Feedbacks[]

  role           UserRole?        @default(user)
  banned         Boolean?         @default(false)
  banReason      String?
  banExpires     DateTime?
  WorkoutSession WorkoutSession[]

  // Subscription fields
  subscriptions     Subscription[]
  licenses          License[]
  isPremium         Boolean? @default(false)
  premiumUntil      DateTime?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Feedbacks {
  id      String  @id @default(cuid())
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}

model Exercise {
  id                String   @id @default(cuid())
  name              String
  nameEn            String?
  description       String?  @db.Text
  descriptionEn     String?  @db.Text
  fullVideoUrl      String?  @db.Text
  fullVideoImageUrl String?  @db.Text
  introduction      String?  @db.Text
  introductionEn    String?  @db.Text
  slug              String?  @unique
  slugEn            String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  attributes             ExerciseAttribute[]
  WorkoutSessionExercise WorkoutSessionExercise[]

  @@map("exercises")
}

model ExerciseAttributeName {
  id        String                    @id @default(cuid())
  name      ExerciseAttributeNameEnum @unique
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt

  // Relations
  values     ExerciseAttributeValue[]
  attributes ExerciseAttribute[]

  @@map("exercise_attribute_names")
}

model ExerciseAttributeValue {
  id              String                     @id @default(cuid())
  attributeNameId String
  value           ExerciseAttributeValueEnum
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt

  // Relations
  attributeName ExerciseAttributeName @relation(fields: [attributeNameId], references: [id])
  attributes    ExerciseAttribute[]

  @@unique([attributeNameId, value])
  @@map("exercise_attribute_values")
}

model ExerciseAttribute {
  id               String   @id @default(cuid())
  exerciseId       String
  attributeNameId  String
  attributeValueId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  exercise       Exercise               @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  attributeName  ExerciseAttributeName  @relation(fields: [attributeNameId], references: [id])
  attributeValue ExerciseAttributeValue @relation(fields: [attributeValueId], references: [id])

  @@unique([exerciseId, attributeNameId, attributeValueId])
  @@map("exercise_attributes")
}

// Enums
enum ExercisePrivacy {
  PUBLIC
  PRIVATE
}

// Noms d'attributs
enum ExerciseAttributeNameEnum {
  TYPE
  PRIMARY_MUSCLE
  SECONDARY_MUSCLE
  EQUIPMENT
  MECHANICS_TYPE
}

// Toutes les valeurs possibles
enum ExerciseAttributeValueEnum {
  // Types d'exercices
  BODYWEIGHT
  STRENGTH
  POWERLIFTING
  CALISTHENIC
  PLYOMETRICS
  STRETCHING
  STRONGMAN
  CARDIO
  STABILIZATION
  POWER
  RESISTANCE
  CROSSFIT
  WEIGHTLIFTING

  // Groupes musculaires
  BICEPS
  SHOULDERS
  CHEST
  BACK
  GLUTES
  TRICEPS
  HAMSTRINGS
  QUADRICEPS
  FOREARMS
  CALVES
  TRAPS
  ABDOMINALS
  NECK
  LATS
  ADDUCTORS
  ABDUCTORS
  OBLIQUES
  GROIN
  FULL_BODY
  ROTATOR_CUFF
  HIP_FLEXOR
  ACHILLES_TENDON
  FINGERS

  // Équipements
  DUMBBELL
  KETTLEBELLS
  BARBELL
  SMITH_MACHINE
  BODY_ONLY
  OTHER
  BANDS
  EZ_BAR
  MACHINE
  DESK
  PULLUP_BAR
  NONE
  CABLE
  MEDICINE_BALL
  SWISS_BALL
  FOAM_ROLL
  WEIGHT_PLATE
  TRX
  BOX
  ROPES
  SPIN_BIKE
  STEP
  BOSU
  TYRE
  SANDBAG
  POLE
  BENCH
  WALL
  BAR
  RACK
  CAR
  SLED
  CHAIN
  SKIERG
  ROPE
  NA

  // Types de mécanique
  ISOLATION
  COMPOUND
}

model WorkoutSession {
  id        String                       @id @default(cuid())
  userId    String
  user      User                         @relation(fields: [userId], references: [id])
  startedAt DateTime
  endedAt   DateTime?
  duration  Int? // en secondes
  exercises WorkoutSessionExercise[]
  muscles   ExerciseAttributeValueEnum[] @default([])

  @@map("workout_sessions")
}

model WorkoutSessionExercise {
  id               String         @id @default(cuid())
  workoutSessionId String
  exerciseId       String
  order            Int
  workoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  exercise         Exercise       @relation(fields: [exerciseId], references: [id])
  sets             WorkoutSet[]

  @@map("workout_session_exercises")
}

model WorkoutSet {
  id                       String                 @id @default(cuid())
  workoutSessionExerciseId String
  setIndex                 Int
  type                     WorkoutSetType
  types                    WorkoutSetType[]       @default([])
  valuesInt                Int[]                  @default([])
  valuesSec                Int[]                  @default([])
  units                    WorkoutSetUnit[]       @default([])
  completed                Boolean                @default(false)
  workoutSessionExercise   WorkoutSessionExercise @relation(fields: [workoutSessionExerciseId], references: [id], onDelete: Cascade)

  @@map("workout_sets")
}

enum WorkoutSetType {
  TIME
  WEIGHT
  REPS
  BODYWEIGHT
  NA
}

enum WorkoutSetUnit {
  kg
  lbs
}

// ========================================
// BILLING & SUBSCRIPTION MODELS
// ========================================

// Configuration globale pour self-hosted
model AppConfiguration {
  id                String   @id @default("default")
  
  // Mode de paiement
  billingMode       BillingMode @default(DISABLED)
  
  // Limites pour le mode gratuit
  freeUserLimits    Json?    // {"maxWorkouts": 10, "maxExercises": 100}
  
  // Configuration des processeurs
  activeProcessor   PaymentProcessor?
  processorConfig   Json?    // Clés API chiffrées, webhooks secrets, etc.
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("app_configuration")
}

// Plans d'abonnement (optionnels en self-hosted)
model SubscriptionPlan {
  id                String   @id @default(cuid())
  name              String
  description       String?
  
  // Prix (optionnels en self-hosted)
  priceMonthly      Decimal? @db.Decimal(10, 2)
  priceYearly       Decimal? @db.Decimal(10, 2)
  currency          String?  @default("EUR")
  
  // IDs externes
  revenueCatProductId String? @unique
  externalProductId   String? // Stripe, LemonSqueezy, etc.
  
  // Features et limites
  features          Json?    // {"maxWorkouts": 100, "premiumExercises": true, etc.}
  
  // Visibilité
  isActive          Boolean  @default(true)
  isVisibleInSelfHosted Boolean @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  subscriptions     Subscription[]
  
  @@map("subscription_plans")
}

// Abonnements utilisateurs (source de vérité : RevenueCat pour mobile)
model Subscription {
  id                    String    @id @default(cuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id])
  
  planId                String
  plan                  SubscriptionPlan @relation(fields: [planId], references: [id])
  
  // RevenueCat data
  revenueCatUserId      String?
  revenueCatEntitlement String?
  
  // Status
  status                SubscriptionStatus
  
  // Dates importantes
  startedAt             DateTime
  currentPeriodEnd      DateTime?
  cancelledAt           DateTime?
  
  // Platform info
  platform              Platform?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Historique des paiements
  payments              Payment[]
  
  @@unique([userId, platform])
  @@map("subscriptions")
}

// Paiements - abstrait pour supporter plusieurs processeurs
model Payment {
  id                String   @id @default(cuid())
  subscriptionId    String
  subscription      Subscription @relation(fields: [subscriptionId], references: [id])
  
  amount            Decimal  @db.Decimal(10, 2)
  currency          String
  
  // Processeur flexible
  processor         PaymentProcessor
  processorPaymentId String? // ID Stripe, PayPal, LemonSqueezy, etc.
  
  // RevenueCat transaction ID
  revenueCatTransactionId String?
  
  status            PaymentStatus
  
  paidAt            DateTime?
  failedAt          DateTime?
  
  metadata          Json?    // Données spécifiques au processeur
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([processorPaymentId])
  @@map("payments")
}

// Licences pour self-hosted (alternative aux subscriptions)
model License {
  id                String   @id @default(cuid())
  key               String   @unique
  
  // Propriétaire
  userId            String?
  user              User?    @relation(fields: [userId], references: [id])
  
  // Validité
  validFrom         DateTime @default(now())
  validUntil        DateTime?
  
  // Limites
  maxUsers          Int?     @default(1)
  features          Json?
  
  // Activation
  activatedAt       DateTime?
  lastCheckedAt     DateTime?
  
  createdAt         DateTime @default(now())
  
  @@map("licenses")
}

// Webhooks - traitement asynchrone et flexible
model WebhookEvent {
  id                String   @id @default(cuid())
  
  provider          PaymentProcessor  // Le provider qui a envoyé le webhook
  eventType         String           // Type d'événement selon le provider
  
  payload           Json             // Payload brut du webhook
  headers           Json?            // Headers du webhook (pour signature, etc.)
  
  processed         Boolean  @default(false)
  processedAt       DateTime?
  retryCount        Int      @default(0)
  maxRetries        Int      @default(3)
  
  error             String?  @db.Text
  
  // Pour traçabilité
  resultingAction   String?  // Ex: "subscription_created", "payment_failed"
  relatedUserId     String?  // Pour recherche rapide
  relatedPaymentId  String?  // Pour lier au paiement si applicable
  
  createdAt         DateTime @default(now())
  
  @@index([provider, processed])
  @@index([relatedUserId])
  @@index([createdAt])
  @@map("webhook_events")
}

// ========================================
// BILLING ENUMS
// ========================================

enum BillingMode {
  DISABLED          // Self-hosted gratuit
  LICENSE_KEY       // Self-hosted avec licence
  SUBSCRIPTION      // SaaS avec abonnements
  FREEMIUM         // Gratuit avec options premium
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  CANCELLED
  EXPIRED
  PAUSED
}

enum Platform {
  WEB
  IOS
  ANDROID
}

enum PaymentProcessor {
  STRIPE
  PAYPAL
  LEMONSQUEEZY
  PADDLE
  APPLE_PAY
  GOOGLE_PAY
  REVENUECAT
  NONE              // Pour self-hosted gratuit
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

